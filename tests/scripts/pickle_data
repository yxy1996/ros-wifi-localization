#!/usr/bin/env python
"""
Listens to RssData and Pose messages and pickles them for later processing with Python

__author__ =  'Renato Miyagusuku <miyagusuku at robot.t.u-tokyo.ac.jp>'
__version__=  '0.1'
__license__ = 'BSD'
"""

from __future__ import print_function
import rospy

import sys
import numpy as np
from std_msgs.msg import String
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseStamped
from rss.msg import RssData

def eprint(*args, **kwargs):                    #prints errors/warnings to stderr
    print(*args, file=sys.stderr, **kwargs)
    sys.stderr.flush()
    
def callback_save(msg,cb_args):
    rss         = cb_args[0]
    amcl_poses  = cb_args[1]
    odom_poses  = cb_args[2]

    file_path   = cb_args[3]
    file_name   = cb_args[4]
    
    file1 = file_path+file_name+'rss.p'
    file2 = file_path+file_name+'poses.p'
    file3 = file_path+file_name+'odom.p'

    try: 
        import cPickle as pickle
    except ImportError:
        import pickle

    with open(file1, 'wb') as f:
        pickle.dump(rss,f,2)

    with open(file2, 'wb') as f:
        pickle.dump(amcl_poses,f,2)

    with open(file3, 'wb') as f:
        pickle.dump(odom_poses,f,2)
    
    eprint('-----------------------------\nRss and Poses pickled to file\n-----------------------------')

def callback_rss(rss,cb_arg):
    cb_arg.append(rss)

def callback_amcl(amcl_pose,cb_arg):
    cb_arg.append(amcl_pose)

def callback_odom(odom_pose,cb_arg):
    cb_arg.append(odom_pose)


if __name__ == '__main__':
    rss         = list()
    amcl_poses  = list()
    odom_poses  = list()
    
    rospy.init_node('log_data',anonymous=True)  #ROS node init        

    file_path = rospy.get_param('~save_file_path', '/home/yxy/Desktop/')
    file_name = rospy.get_param('~save_file_name', '')

    eprint('Subscribing to rss')
    try:
        rospy.Subscriber('rss',RssData,callback_rss,callback_args=rss)    #topic,data type, action(data) 
    except:
        eprint('Error subscribing to rss')

    eprint('Subscribing to amcl pose')
    try:
        rospy.Subscriber('amcl_pose',PoseWithCovarianceStamped,callback_amcl,callback_args=amcl_poses) 
    except:
        eprint('Error subscribing to amcl')

    eprint('Subscribing to robot pose')
    try:
        rospy.Subscriber('odom_only/pose',PoseStamped,callback_odom,callback_args=odom_poses)
    except:
        eprint('Error subscribing to odom_only/pose')
 
    eprint('Subscribing to save')
    rospy.Subscriber('save',String,callback_save,callback_args=(rss,amcl_poses,odom_poses,file_path,file_name))   #topic=save


    r = rospy.Rate(0.2)  #0.2Hz
    #TODO: Process measurements and poses    
    while not rospy.is_shutdown():
        #eprint('Number of measurments: {}'.format(str(len(measurements))))
        r.sleep()


#call save 
#rostopic pub -1 /save std_msgs/String hola













